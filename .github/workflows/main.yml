name: Build and Release App

on:
  push:
     branches:
       - main
     paths-ignore:
       - '**/*.md'
       - '**.github/workflows/*'
  workflow_dispatch:

permissions:
  contents: write
  # pages: write
  # id-token: write

# concurrency:
#   group: "pages"
#   cancel-in-progress: false

jobs:
  release:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Xcode Select Version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      # - name: Setup Certificate
      #   uses: apple-actions/import-codesign-certs@v2
      #   with: 
      #     p12-file-base64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
      #     p12-password: ${{ secrets.P12_PASSWORD }}

      - name: Setup get-next-version
        run: |
          curl -L -o get-next-version https://github.com/thenativeweb/get-next-version/releases/download/2.6.3/get-next-version-darwin-arm64
          chmod a+x get-next-version
          sudo mv get-next-version /usr/local/bin

      - name: Get Next Version
        id: get_next_version
        run: |
          OUTPUT=$(get-next-version --target json)
          NEXT_VERSION=$(echo $OUTPUT | jq -r '.version')
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Bump version in Config.xcconfig
        run: |
          CURRENT_BUILD=$(grep BUILD_NUMBER iRPC/Config.xcconfig | cut -d ' ' -f 3)
          NEW_BUILD=$((CURRENT_BUILD + 1))
          sed -i '' "s/BUILD_NUMBER = $CURRENT_BUILD/BUILD_NUMBER = $NEW_BUILD/" iRPC/Config.xcconfig
          
          CURRENT_VERSION=$(grep VERSION iRPC/Config.xcconfig | cut -d ' ' -f 3)
          NEW_VERSION=${{ steps.get_next_version.outputs.version }}
          sed -i '' "s/VERSION = $CURRENT_VERSION/VERSION = $NEW_VERSION/" iRPC/Config.xcconfig

      - name: Build Changelog
        uses: dlavrenuek/conventional-changelog-action@v1.2.3
        id: changelog
        with:
          from: ${{ steps.get_next_version.outputs.current_version }}
          to: HEAD

      - name: Write Changelog
        run: echo "${{ steps.changelog.outputs.body }}" > RELEASE.md
          
      - name: Build macOS app
        run: xcodebuild archive -scheme "iRPC" -configuration "Release" -archivePath "build/iRPC.xcarchive" -destination "generic/platform=macOS,name=Any Mac" CODE_SIGN_IDENTITY="" CODE_SIGNING_ALLOWED=NO "OTHER_SWIFT_FLAGS=${inherited} -D GITHUB_RELEASE" | xcbeautify

      # - name: Sign, Package and Notarize .app
      #   run: |
      #       cp -R "build/iRPC.xcarchive/Products/Applications/"*.app "build/iRPC.app"
      #       cd build
      #       codesign -s "Developer ID Application" -f --timestamp -o runtime --deep "iRPC.app/Contents/Frameworks/Sparkle.framework/Versions/B/XPCServices/Downloader.xpc/Contents/MacOS/Downloader"
      #       codesign -s "Developer ID Application" -f --timestamp -o runtime --deep "iRPC.app/Contents/Frameworks/Sparkle.framework/Versions/B/XPCServices/Installer.xpc/Contents/MacOS/Installer"
      #       codesign -s "Developer ID Application" -f --timestamp -o runtime --deep "iRPC.app/Contents/Frameworks/Sparkle.framework/Versions/B/Updater.app/Contents/MacOS/Updater"
      #       codesign -s "Developer ID Application" -f --timestamp -o runtime --deep "iRPC.app/Contents/Frameworks/Sparkle.framework/Versions/B/Autoupdate"
      #       codesign -s "Developer ID Application" -f --timestamp -o runtime --deep "iRPC.app/Contents/MacOS/iRPC"
      #       codesign -s "Developer ID Application" -f --timestamp -o runtime --deep "iRPC.app"
      #       npm install --global create-dmg
      #       create-dmg "iRPC.app" --overwrite
      #       mv *.dmg iRPC.dmg
      #       DMG_FILE="iRPC.dmg"
      #       echo "DMG_FILE=$DMG_FILE" >> $GITHUB_ENV
      #       xcrun notarytool submit "$DMG_FILE" --wait --apple-id "${{ secrets.NOTARIZATION_USERNAME }}" --password "${{ secrets.NOTARIZATION_PASSWORD }}" --team-id "L988J7YMK5"
      #       xcrun stapler staple "$DMG_FILE"

      # - name: Configure Sparkle
      #   run: |
      #       curl -L -o Sparkle-2.4.2.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/2.4.2/Sparkle-2.4.2.tar.xz
      #       tar -xJf Sparkle-2.4.2.tar.xz
      #       mkdir update
      #       mv "./build/$DMG_FILE" update/
      #       echo "${{ steps.changelog.outputs.body }}" > RELEASE.md
      #       chmod +x ./bin/generate_appcast

      # - name: Convert Markdown to HTML
      #   uses: jaywcjlove/markdown-to-html-cli@main
      #   with:
      #       source: RELEASE.md
      #       output: ./update/${DMG_FILE%.dmg}.html
      #       github-corners: false
        
      # - name: Generate appcast.xml
      #   run: echo "$EDDSA_PRIVATE_KEY" | ./bin/generate_appcast --ed-key-file - --link https://iRPCmac.app --embed-release-notes --download-url-prefix https://github.com/castdrian/iRPC/releases/latest/download/ update/
      #   env:
      #     EDDSA_PRIVATE_KEY: ${{ secrets.EDDSA_PRIVATE_KEY }}
      #     ARCHIVES_SOURCE_DIR: .

      # - name: Archive appcast.xml as artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: appcast
      #     path: ./update/appcast.xml

      - name: Create App Archive
        run: |
          cp -R "build/iRPC.xcarchive/Products/Applications/"*.app "iRPC.app"
          zip -r iRPC.zip iRPC.app
          rm -rf iRPC.app

      - name: Commit & Push changes
        uses: EndBug/add-and-commit@v9
        with:
          add: 'iRPC/Config.xcconfig'
          default_author: github_actions
          fetch: false
          message: 'Bump version [skip ci]'
          push: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_next_version.outputs.version }}
          body_path: RELEASE.md
          files: iRPC.zip
          fail_on_unmatched_files: true
          token: ${{ env.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  # pages:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Download appcast.xml artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: appcast
  #         path: ./

  #     - name: Setup Pages
  #       uses: actions/configure-pages@v3

  #     - name: Build with Jekyll
  #       uses: actions/jekyll-build-pages@v1
  #       with:
  #         source: ./
  #         destination: ./_site

  #     - name: Upload artifact
  #       uses: actions/upload-pages-artifact@v3

  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4